代码提示快捷键：alt + /

[1]
表单的提交方式：
   get提交：会把数据使用键值对的方式，追加到地址栏
   post提交：不会追加到地址栏

[2]
VSCode编写HTML：
    ！ + Tab：自动生成标准html文件
    shift + alt + B：选择浏览器显示


外部引入CSS文件：
    <link rel="stylesheet" type="text/css" href="css4/basic.css" />

[3]
CSS选择器：
    标签选择器  使用标签名进行选择
    标签名{
        样式
    }

    id选择器  使用标签的id进行选择
    #id值{
        样式
    }

    类选择器  根据标签的类（class的值）进行选择
    .class的值{
        样式
    }

    组选择器  选择一组元素
    选择器1，选择器2，...{
        样式
    }

[4]
JavaScript是运行在浏览器端的脚本语言
需要在script标签里面编写JavaScript代码

变量
    变量必须先声明后使用

    使用var关键字声明变量，声明时不需要指定类型
    变量在使用过程中可以接受不同类型的值

    五种原始类型：number String Boolean null undefined（声明了变量但是未赋值）
    对象：object（除了上述五中外，一切皆是object，方法也是）

    判断一个变量的类型：typeof

函数
    声明函数：
        法1：function 方法名（参数名，参数名）{方法体}
        function sum（a，b）{
            alert（a+b）；
        }

        法2：将方法赋值给一个变量（因为方法是object），方法名就是变量名
        var sum = function（a，b）{
            alert（a+b）；
        }

    调用函数：方法名（参数列表）

    方法不管在哪里声明，浏览器都会优先加载
    js中方法的唯一标识就是方法名，没有方法重载这一说
    调用方法的时候参数是可以选传的

对象
    创建对象的两种方式：
        1、var object = new Object()；
        2、var object = {}；

    动态的向对象中添加属性和方法
        添加name属性：obj.name = “张三”
        获取属性：obj.name

        添加方法：
            obj.work = function（）{
                alert（“我要工作”）；
            }
        调用方法：obj.work（）；

    在声明的时候为对象添加属性和方法
        var obj = {name：“张三”，age：20，work：function（）{
            alert（"我要工作"）；
        }}


事件
    js和html之间的交互是通过事件实现的
    可以在是事件发生时执行js

    w3School文档中：JavaScript --> js参考手册 --> js对象 -->DOM Event

    事件响应方式：
        1、在标签事件属性中编码
        <button id="btn" onclick="alert（'你好')">我是按钮</button>

        2、动态绑定事件（掌握）
            window.onload表示告诉浏览器，整个页面加载完成后执行后面的方法
            window.onload = function(){
                步骤1：找到元素
                var button = document.getElementById("btn")；

                步骤2：为元素相应的事件属性赋值一个方法
                button.onclick = function(){
                    alert（"你好")；
                }
            }
                步骤3：事件发生后浏览器会自动调用


加载方式
    js代码主要在页面中有以下几种方式嵌入：
        1、将js代码写到网页头的<script>中（需要使用window.onload）
        2、将js代码写成外部文件，并引入
            <script type=""text/javascript" src=""></script> （引入外部文件，<script></script>中间就不能写代码了）
        3、如果是事件触发，还可以将js代码写在事件中(不推荐)
        4、将js代码写在网页结束位置


dom模型 文档(document)对象模型
    可以把dom认为是页面上数据和结构的一个树形表示
    浏览器把html页面抽象成了一个document对象

    bom模型：把整个浏览器抽象成了一个browser对象

    节点：每一个元素都是一个节点
    元素节点：html文档中的整个html标签
    属性节点：元素的属性
    文本节点：html标签中的文本内容

    节点的属性：nodeName nodeType nodeValue

document对象
    是一个文档对象
    代表整个文档
    所有节点都是它的后代节点
    是window对象的属性
    可以直接使用

获取元素节点
    通过document对象调用
    1、getElementById() 通过id属性获取一个元素节点对象
    2、getElementsByTagName() 通过标签名获取一组元素节点对象
    3、getElementsByName() 通过name属性获取一组元素节点对象

    对象.innerText 获取节点内部的文本值
    对象.innerHTML 获取节点内部的html代码
    对象.childNodes 获取对象的所有子节点

dom增删改
    document.createElement("标签名")  创建元素节点并返回，但不会自动添加到文档中
    document.createTextNode("文本名")  创建文本节点并返回，但不会自动添加到文档中
    element.appendChild(ele)  将ele添加到element所有子节点后面
    parentEle.insertBefore(newEle, targetEle)
    parentEle.replaceChild(newEle, oldEle)
    parentEle.removeChild(childNode)


[5]
jQuery
    JavaScript + Query
    跨浏览器的JavaScript库，简化html和JavaScript之间的操作
    
    //$()：调用$方法  $();：叫做jQuery的核心函数，本质就是一个方法
    //为$()方法传入一个function(){}作为参数：就相当于window.onload=function(){写代码} ---> $(function(){写代码})
    //
    $(function(){
        //使用$()查找元素，使用.click()来绑定单击相应函数，把单击相应函数作为click()的参数传入
        $("#bynId").click(function(){
            alert("hello");
        });
    });


    $
        $是jQuery的核心函数，能完成jQuery的很多功能。$();就是调用$这个函数
        1、传入参数为[函数]时：$(function(){}) 文档加载完成后执行此方法
        2、传入参数为[html字符串]时：$("<div>html</div>") 根据字符串创建元素节点对象
            在ul里添加一个li：$("<li>手机</li>").appendTo ("#ulId");

        3、传入参数为[选择器字符串]时：$("#id") 根据选择器查找出元素节点对象
            $("#aid").click(function(){
                alert("你好");
            });

        4、传入参数为[dom对象]时：$(this) 将dom对象包装为jquery对象返回 
        
            dom对象：使用原生的js查找（创建）到的元素
            jQuery对象：使用jQuery查找（包装）到的元素
            dom和jQuery对象之间不能相互操作彼此的方法，需要进行转换

            1、dom ---> jQuery：$(dom对象);
            2、jQuery ---> dom：jQuery对象[0];


        选择器
            基本选择器：
                id选择器：#id  $("#id")
                标签选择器：$("标签名")
                class选择器：.class  $(".class")  $("div.one")：class为one的div
                *：$("*")
                组选择器：$("selector1, selector2,..., selectorN")
            
            层级选择器
                后代选择器：$("祖先元素 后代元素")
                子元素选择器：$("父元素>子元素")
                相邻元素选择器：$("pre+next") 匹配所有紧接在pre元素后的next元素
                兄弟元素选择器：$("pre~siblings") 匹配pre元素之后的所有siblings元素


            基本过滤选择器
                first：$("div:first")  选择第一个div
                last
                not(selector)：$("div:not(.one)").css("background","#bbffaa")  选择class不为one的所有div
                even：$("div:even")
                odd
                eq(index)
                gt(index)
                lt(index)
                header：$(":header")  选择所有的标题元素
                animated：$(":animated")  选择当前正在执行动画的所有元素

                选出所有没有执行动画的最后一个div：$("div:not(:animated):last")

            内容过滤选择器
                contains(text)：$("div:contains("john")")
                empty：选择所有不包含子元素或者文本的元素
                has(selector)：$("div:has(p)").addClass("text")
                parent:选择含有子元素或者文本的元素

            可见性过滤选择器
                hidden：所有隐藏的元素
                visible：所有可见的元素

            属性过滤选择器
                [attribute]  包含attribute属性的元素  $("div[id]")：查找所有含有id属性的div
                [attribut=value]
                [attribute!=value]
                [attribute^=value]  attribute属性的value值以value开头  $("input[name^='news']")
                [attribute$=value]  attribute属性的value值以value结尾
                [attribute*=value]  attribute属性的value值包含value
                [attrSel1][attrSel2][attrSel3]  同时满足所有条件

            子元素选择器
                nth-child  匹配父元素下第N个子或奇偶元素  $("ul li:nth-child(2)")：在每个ul查找第2个li
                first-child
                last-child
                only-child

                选取每个class为one的div的第二个子元素：$("div.one :nth-child(2)")   div.one后面加空格，表示div.one的后代元素

            表单对象选择器
                :input：选择所有的input框  $(":input")：匹配所有的input、textarea、select、button元素
                :text：匹配所有单行文本框
                :password
                :radio
                :checkbox
                :submit
                :image
                :reset
                :button
                :file
                :hidden

                表单对象的属性
                :enabled   $("input:enabled")：查找所有可用的input元素
                :disabled
                :checked
                :selected

                获取下拉框选中的内容：
                //.each相当于jQuery中的增强for
                $(":selected").each(function(){
                    //this表示当前遍历的对象
                    alert(this.innerText);
                })
    
    元素筛选方法


[6]
事件

文档加载
    $(function(){}) dom载入就绪（dom树画完）
    window.onload 是在文档加载完成之后执行

    window.onload不能写多个，会覆盖
    $(function(){})可以写多个

事件绑定和移除
    常规绑定
        $("#btn").click(function(){})
    
    使用bind()方法
        $("#btn").bind("click",function(){})

    合并鼠标移入和鼠标移出事件
        $("#btn").mouseover(function(){}).mouseout(function(){})

        $("#btn").bind("mouseover mouseout",function(){});
    
    切换元素可见状态
        .toggle()

    绑定一次性事件
        $("#btn").one("click",function(){})

    给所有的元素附加一个事件处理函数，即使元素是以后添加进来的也有效
        $("#btn").live("click",function(){})

    解绑
        $("#btn").unbind() 解绑所有事件
        $("#btn").unbind("click") 解绑click事件

事件冒泡
    事件从内层向外层传导，一直传到document

    如何阻止事件向上传导：return false;

事件对象
    //绑定事件会有一个响应函数，获取事件对象只需要在响应函数的参数列表里定义一个变量，
    //浏览器就会把事件的对象赋值给这个变量
    //js方式
    areaDiv.onmousemove = function(event){}

    //jQuery方式
    $("#areaDiv").mousemove(function(event){
         $("#showMsg").text("X:"+event.pageX+"--->Y:"+event.pageY);
    })

    $("#areaDiv").bind("click mousemove",function(event){
        //当点击的时候弹出showMsg的文本值
        if("click"==event.type){

        }

        //当mousemove的时候showMsg里面显示详细信息
        if("mousemove"==event.type){

        }
    })

    
[7]
动画

    正则表达式:验证字符串是否符合表达式规则
    1、创建一个正则表达式
        var reg=/a/;  //表达式包含a就返回true  
    2、使用表达式的test()方法验证传入的字符串是否符合规则，返回boolean
        reg.test("abc");


[8]
jQuery总结
    DOM操作
    1、属性操作
    .html()：不传参获取内部html片段；传参设置内部html片段
    .text()：不传参获取标签内的文本值；传参设置文本值
    .val()：不传获取value值；传参设置value；value(数组)设置下拉列表、多选框、单选框是否被选中

    .attr()：获取自定义属性；传参设置
    .prop()：获取原生属性；传参设置

    2、文档操作
    --增加
    父元素.append(子元素)：子元素加入到父元素里（追加到后面）
    子元素.appendTo(父元素)
    父元素.prepend(子元素)：子元素加入到父元素里（追加到前面）
    子元素.prependTo(父元素)

    a.after(b)：b插入到a后面
    b.before(a)：b插入到a的前面
    a.insertAfter(b)：a插入到b后面
    a.insertBefore(b)：a插入到b的前面

    --删除
    a.empty()
    a.remove()

    --替换
    a.replaceWith(b)
    a.replaceAll(b)：a替换所有b

    --包裹
    a.wrap(b)：使用b把每一个a包裹
    a.wrapAll(b)：使用b把所有的a包裹
    a.wrapInner(b)：a的子元素使用b包裹
    a.unwrap(b)

    CSS样式
    .addClass("")
    .removeClass("")
    .hasClass("")
    .toggleClass("")：切换
    .css()：返回、设置css

    事件
    --文档加载
        1、引入jQuery库文件
        2、再写一个script标签（放在head标签内）
            $(function(){
                //dom树绘制完成

            });
        3、与window.onload区别
            1）window.onload：文档加载完成
               $(function(){}）：dom树绘制完成
            2）window.onload：不可以写多次
               $(function(){}）：可以写多次

    --事件绑定&接触
        1、常规绑定
            ele.click(function(){});  //还可以通过链式操作绑定多个事件
        2、使用Bind方法
            ele.bind("事件名 事件名",function(){

            })
        3、绑定一次性事件
            ele.one("事件名",function(){

            })
        4、动态为以后的元素都绑定上事件
            ele.live("事件名",function(){

            })
        5、解除绑定
            ele.unbind();移出所有事件
            ele.unbind("事件名");移出指定事件

    --事件冒泡
        父子元素同时绑定一个事件，当子元素事件触发，父元素也能感知
        事件的向上传导

        解决：return false

    --事件对象
        浏览器把具体发生的事件的详细信息封装成一个对象
        使用：
            在事件的回调方法中写一个参数，浏览器就会把事件对象赋值给这个参数
            ele.click(function(event){
                //event就是事件对象
            }))

    动画
    --基本
    show()
    hide()
    toggle()

    --滑动
    slideDown()
    slideUp()
    slideToggle()

    --淡入淡出
    fadeIn()
    fadeOut()
    fadeTo()
    fadeToggle()

    --自定义
    animate()

[9]
XML
    以统一的格式，组织有关系的数据，为不同平台下的应用程序服务
    用途：
        1、程序的配置文件
        2、网络间数据传输

    CDATA区
    CDATA区的内容不会被解析器当成标签解析，在浏览器会原封不动的输出
    
    解析体系
        --DOM
            文档对象模型，一次性将xml文件全部加载进内存，生成DOM树，通过DOM树来读取文档的内容

            缺点：一次性将文档全部加载进内存，如果文档过大会大量消耗内存

            dom解析第三方工具   --dom4j

        --SAX
            Simple API for XML
            基于事件的回调方式来解析xml文档，一次只读一个节点，并通过方法将读取到内容返回

            缺点：只能做查询操作，不能修改，使用起来比较复杂
            一旦解析过一个节点将不能重复解析，如果希望重复解析，只能重新开始

            SAX解析第三方根据   --pull

        DOM4J解析
            1、解析流程
                1）导包
                2）创建一个阅读器 SAXReader
                    SAXReader reader = new SAXReader();
                3）读取xml文件，返回一个document对象，代表整个dom对象
                    Document document = reader.read(文件路径);
                4）先获取根节点，从根节点开始遍历
                    Element rootEle = document.getRootElement();

            2、主要方法
                rootEle.elements(); 返回下边所有的子节点 集合

                //当前遍历获取到一个元素
                ele.getName(); 获取元素名
                ele.getText(); 获取元素内的文本值
                ele.attributeValue("属性名"); 获取元素的属性值

                ele.elementText("标签名"); 获取ele 标签名为传入参数的子元素的文本值

                ele.element(); 找到第一个子元素
                ele.element("tagName"); 找到ele第一个匹配的tagName子元素
                ele.elements("tagName"); 获取ele下的所有tagName子元素

            3、xPath
                快速查找元素
                语法：
                    // 找到所有
                    / 从根开始找

                1、导包 jaxen.jar
                2、主要方法
                    ele.selecteStringNode(xPath); 根据xPath规则获取单个节点
                    ele.selecteNodes(xPath); 根据xPath规则返回节点集合


[10]
Tomcat

webapps：里面集合了所有的web项目，每一个文件夹就代表一个web项目
    tomcat默认访问的是ROOT目录
    写好的web项目就放到webapps
    一般访问一个web项目默认展示index页面

[11]
响应状态码
    200：请求成功
    404：请求的资源没有找到
    500：请求资源找到了，但服务器内部出现了错误
    302：重定向，当响应码为302时，表示服务器要求浏览器重新发一个请求，服务器会发送一个响应头Location，它指定新请求的URL地址

    以2开头的响应状态码，都表示的是成功
    以3开头的响应状态码，都表示的是需要重新请求另外一个资源
    以4开头的响应状态码，都表示的是资源未找到（一般都是请求地址写错），服务器启动失败
    以5开头的响应状态码，都表示的是服务器内部出错（代码错）

get请求：将请求的数据放在了url上，不安全
post请求：请求体里面封装的是浏览器要提交给服务器的数据

[12]
servlet
    运行在web服务器上的java程序，通过HTTP接受、处理和响应来自客户端的请求
    一个servlet只能处理一个指定的请求，需要在web.xml里面配置servlet的详细信息

    servlet跑在Tomcat服务器上，Tomcat服务器就叫做servlet容器

编写servlet的三步：
    1、创建自己的类，实现servlet接口
    2、实现service方法
    3、在web.xml中配置servlet信息
    //在servlet标签配置servlet的类信息：告诉服务器我有这个servlet
    <servlet>
        //配置servlet的名字，相当于给servlet类起别名（给程序员看）
        <servlet-name>MyFirstServlet</servlet-name>
        //配置servlet类的全名（给服务器看，服务器通过全类名找到MyFirstServlet）
        <servlet-class>com.chenhao.demo.MyFirstServlet</servlet-class>
    </servlet>
    //映射信息，告诉服务器这个servlet用来处理哪个请求
    <servlet-mapping>
        //刚才配置的servlet的别名
        <servlet-name>MyFirstServlet</servlet-name>
        //配置这个servlet用来处理哪个请求
        ///hello表示，在浏览器中输入http://localhost:8080/WebTest/hello时，调用这个servlet来处理
        //hello是动态资源，启动一段代码（没有hello的静态文件）
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>

(IDEA可以自动创建servlet：右键-->create new servlet)

servlet生命周期
    servlet跑在Tomcat服务器上，Tomcat服务器就叫做servlet容器

    当第一次访问/hello时：
        1、服务器创建一个servlet对象
        2、调用Init方法
        3、调用Service方法
    以后请求：
        4、只调用service方法来处理请求（单实例多线程运行）
    当项目从服务器上卸载：
        5、服务器会调用destroy方法

ServletConfig
    封装了servlet配置信息的对象，一个servlet对应一个ServletConfig，封装的是当前servlet的配置信息
    一个web项目对应一个ServletContext，代表当前web项目信息
    1、获取servlet别名：config.getServletName()
    2、获取Servlet初始化参数：config.getInitParameter()
    3、获取ServletContext对象：config.getServletContext()

ServletContext
    一个web应用对应一个ServletContext，代表整个web项目
    获取：servletConfig.getServletContext();
    功能：
        1、可以获取web项目的配置信息（web.xml里配置的context-param），获取初始化参数getInitParameter
        2、获取web项目在服务器上的路径（虚拟路径，/项目名）getContextPath
        3、获取资源的真实路径（文件在磁盘中的存储路径）getRealPath("资源在web项目下的虚拟路径")
        4、作为最大的域对象共享数据
           域对象可以用来在不同的web资源中共享数据
           4大域对象之一：application域对象
           pageContext  request  session  application

[13]
HttpServlet
    专门为处理http请求定制的servlet（web应用）
    doget方法就是用来处理get请求
    dopost方法就是用来处理post请求

    post目前就只有一种：表单提交的时候指定method=“post”
    回车，超链接，img=“”....都是get请求

    get和post的区别：最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数

HttpServletResponse
代表：当次的响应对象
获取：服务器自动传入
    1、可以给浏览器响应字符串（给页面输出内容）
    response.getWriter().write("Hello");
    2、可以重定向到页面或者其他资源
    response.sendRedirect("xxx.html");  //相对路径

HttpServletRequest
代表：封装当次http请求信息的对象
获取：服务器会自动传入
    1、获取请求数据 get放在url后面 post放在请求体里
    request.getParameter("xxx");
    //使用getParameterValues来获取多选框的内容，返回一个数组
    request.getParameterValues("xxx");
    2、获取请求头信息
    request.getHeader("xxx");
    request.getHeaders("xxx");
    3、转发一个页面、资源
    //先获取一个请求转发器
    RequestDispatcher dispatcher = request.getRequestDispatcher("xxx.html"); //相对路径
    //将请求转发出去
    dispatcher.forward(request, response);

    请求提交之后要跳转到一个页面两种方法：重定向、转发（在同一个处理里面只能选择其中一种！一个请求对应一次响应）

    4、作为域对象共享数据
       request

    5、获取项目虚拟路径
       String path = request.getContextPath();

转发和重定向
    转发：服务器处理完成后转交到另外一个资源
    当转发的资源是一个页面资源（静态资源），服务器会给浏览器返回这个资源
    当转发下一个servlet（动态资源），servlet可以继续处理
    （重定向同理，也可以转发给动态资源）
    区别：（见截图）

解决浏览器乱码问题
（在第一次使用response之前就设置，也就是response什么操作都没有进行之前）
法1：
    //告诉浏览器传输的数据的内容类型
    response.setContentType("text.html");
    //告诉浏览器编码
    response.setCharacterEncoding("utf-8");

法2：
    response.addHeader("Content-Type", "text/html;charset=utf-8");

法3：
    response.setContentType("text/html;charset=utf-8");

    字符乱码存在一下情况：
        1、响应给浏览器的数据是乱码
            原因：浏览器不知道数据的类型和编码格式
            解决：告诉浏览器内容类型和编码格式。在响应头里Content-Type:text/html;charset=utf-8
            方法：上述3种方法 response.setContentType("text/html;charset=utf-8");
        2、表单post乱码
            原因：浏览器将数据编码并提交上来，但是浏览器不知道编码规则
            解决：让服务器知道编码规则即可，重新设置请求的编码格式
            方法：request.setCharacterEncoding("utf-8");  //在第一次使用request之前就设置
        3、表单get乱码
            原因：浏览器将url编码，但服务器不知道编码规则（request.setCharacterEncoding只对请求体起作用，对url不起作用）
            解决：修改tomcat的server.xml文件
            方法：在8080端口配置处添加URIEncoding="utf-8"

[14]
项目路径问题

url组成：协议名://主机名:端口号/项目名/资源名

相对路径：不以/开始，相对于当前资源的路径（在转发情况下，相对路径可能不靠谱）
绝对路径：以/开始，相对于根目录的路径
绝对路径：/经常代表从根开始

页面上的路径：<a href=" "></a>  <form action=" ">  <img src=" ">  <link href=" "> ...
所有在页面上的绝对路径，/都代表是从服务器的根开始 http://localhost:8080
所以在页面写绝对路径需要加上项目名

服务器上的路径：/代表当前项目，http://localhost:8080/项目名
<url-pattern>/login</url-pattern>  request.getRequestDispatcher("/login-success.html")

重定向的路径：/代表服务器的根目录  http://localhost:8080
request.sendRedirect(request.getContextPath + "/资源路径") //getContextPath拿到的是web项目的根路径，也就是“/项目名”

！！！页面上、转发、重定向都推荐使用绝对路径！！！

动态获取项目的根目录（项目路径）：
法1：
    ServletContext context = getServletContext();
    String path = context.getContextPath();
    response.sendRedirect(path + "/success/login-success.html");
法2：
    String path = request.getContextPath();

    //转发使用绝对路径， / 表示从项目的根目录开始
    request.getRequestDispatcher("/success/regist_success.html").forward(request, response);

    //重定向使用绝对路径 / tomcat根目录-服务器的根目录 http://localhost:8080，因此需要加上项目名
    response.sendRedirect(path + "/success/regist_error.html");

[15]
base标签
    指定页面上所有路径的基础路径，所有路径都是以我指定的基础路径开始
    只有使用相对路径的写法，会按照base标签指定的基础路径来拼接新的路径
    例如：<base href="http://localhost:8080/WebTest/"/>

[16]
自动补全返回的类型ctrl + alt + v

[17]
JSP
Java Server Page  一个能写java代码的html页面

    1、JSP本质是一个Servlet，Servlet能做的事情JSP都能做
    2、JSP能够以HTMl页面的方式呈现数据，是一个可以嵌入Java代码的html
    3、JSP不同于HTML，不能使用浏览器直接打开，而必须运行在Servlet容器中

    jsp脚本代码 Java片段：<% %>
      <!-- jsp脚本片段 java代码片段 -->
      <%
        out.write("Hello");
      %>
      <!-- jsp表达式 在页面输出内容 -->
      <%="Hello" %>
      <%=new Date() %>

    JSP运行原理：
        1、我们发现index.jsp页面被翻译成了一个index_jsp.java ---> index_jsp.class
        (C:\Users\陈昊\AppData\Local\JetBrains\IntelliJIdea2020.2\tomcat\Unnamed_BookStore\work\Catalina\localhost\BookStore\org\apache\jsp)
        2、我们发现HttpJspBase继承HttpServlet，所以index_jsp就是一个Servlet
        3、每次请求都调用_jspService()

    基本语法-模板元素（html标签）
        JSP页面中的静态HTML内容：定义页面结构
        是把模板元素原封不动地传入到out.write()；

    基本语法-脚本片段-表达式
        表达式：
            <%=  %>  在页面输出内容
            注意：表达式里面的所有内容都是被传参进 out.print();方法，所以参数怎么写就怎么写（不加;）

        脚本片段：
            <%  %>  在脚本片段中编写java代码
            脚本片段中写out.print();向页面输出内容
            脚本片段会被原封不动地复制到.java文件里
            脚本片段可以写多个，还可以拆分写多个，合起来必须是合法并且完成的java代码
            脚本片段的代码都放在_jspService()方法中（正常方法里是怎么写的，就怎么写）

   基本语法-注释-声明
        声明：
            JSP声明中的代码出现在_jspService()方法外面
            <%！ 代码...  %>：可以写变量、写方法
            比较少用

        注释：
                                    jsp源文件      .Java文件     返回的HTML页面
            <%-- jsp注释 --%>         可见           不可见          不可见
            <!-- html注释 -->         可见           可见            可见
            //java注释                可见           可见            不可见

            <%-- jsp注释 --%>  翻译成.java文件时被忽略
            <!-- html注释 -->  浏览器输出的时候被忽略
            //java注释         翻译成.class文件时被忽略

   基本语法-jsp指令-page
        jsp指令：
            告诉引擎如何处理jsp页面中的其余部分
            <%@ 指令名  属性名=属性值 %>

            page指令：定义页面如何解析
                属性：
                1、import
                2、pageEncoding
                3、contentType：设置响应头，页面如何响应给浏览器
                4、errorPage：指定页面发生错误去向的页面
                5、isErrorPage：表示当前页面是一个错误页面
                6、session：默认为true，当前页面是否参与会话，也就是是否可以使用session对象
                7、isELIgnored：是否忽略el表达式，默认false
                8、info：定义页面的信息（描述）
            include指令：静态包含
                可以把另外一个页面包含进来，采用的方式是将整个页面复制到service方法里面
                jsp引擎不翻译、不编译要包含的页面
                可以包含WEB-INF下的页面
            taglib指令：在页面引入标签库

   基本语法-jsp标签-动态包含
        jsp标签：
            jsp内置了很多标签，每个标签执行一段代码，action元素
            <jsp:include>：也是在页面包含另一个页面，动态包含
                           不是把整个页面复制过来，再一行一行写出去
                           调用了一个动态包含的方法
                           把要包含的页面先翻译出来，再编译出来，再包含

                           被包含的页面内容基本固定地情况下使用静态包含
                           被包含地页面内容经常更新地情况下使用动态包含

            <jsp:forward>：转发到另一个页面
                           转发时带上参数，在标签体里写<jsp:param>

   jsp九大隐含对象-五个常规对象
        隐含对象：在页面直接可以使用的对象
            pageContext：代表当前页面对象
            session：代表对话对象
            exception：代表捕获的异常对象
            application：代表整个web应用
            config：代表servlet配置信息
            out：代表可以在页面输出数据的out对象
            page：代表当前jsp
            request：代表封装当次请求详细信息的对象
            response：代表当次响应的对象

        五大常规对象：
            exception
            config：代表servlet配置信息，jsp页面对应的servlet
                    config.getServletName();等
            out：out.writer();
            page：Object page = this; 还没有this实用
            response：

        四大域对象：域对象用来在其他资源共享数据
            pageContext
                1、可以获取其他隐含对象：pageContext.getXXX();
                2、作为域对象共享数据，只能在当前页面共享数据，离开页面就无法共享
                   通过调用域对象.setAttribute(key, value)给相应域中设置内容  //String key, Object value
                   域对象.getAttribute(key)  获取域中的内容
                   域对象.removeAttribute(key)   移出域中的数据

            request
                1、在同一个请求对象中共享数据，只要是同一次请求，就可以共享数据


            session
                1、同一次会话共享数据（浏览器打开-开始会话  浏览器关闭-结束会话）（不同的浏览器会开启不同的会话）
                   会话就是和web应用沟通，所以不同web应用就是不同会话

            application
                1、代表当前web应用，只要在同一个web应用中都可以共享数据（web应用只要不卸载都可以访问）

            四大域对象的比较（见截图）

[18]
EL  Expression Language

    语法格式：${表达式内容}
    1、页面显示域中的属性：${输入属性名}
    2、要获取对象中的某个属性直接使用“.属性名”
    3、el表达式如果获取域中的属性，直接写属性名，会从四个域中从小到大找，找到即停止（四个域中有重名属性的情况）
    4、el 11个隐含对象
        el可以取出指定的11个对象中的数据，取不出页面上自己定义的数据

        四个域对象（是从这四个域对象中取值）.Map类型
        page域中的数据 ---> pagaScope（封装了pageContext域中的所有共享数据），是一个Map
        request              ---> requestScope
        session              ---> sessionScope
        application          ---> applicationScope

        el取域中属性获取map中的key值，如果没有，返回""

        一个非Map对象：
            pageContext代表的是jsp隐含对象中的pageContext，可以取出jsp页面其他隐含对象
            <%=pageContext.getRequest().getScheme()%>  等价于  ${pageContext.request.scheme}    //.的都是属性名。属性的真正名字是get或set后面的字符串！！！（实际属性对应的名字是小写，get、set后面的字符串是大写的，驼峰命名法）

        五个HTTP协议相关：
            param 封装了所有请求参数的key-value  --->    request.getParameter
            paramValues
            header  --->    request.getHeader
            headerValue
            cookie

        initParam：获取web应用的初始化参数

    5、el表达式如何获取诸如stu-x这些特殊命名的属性
        使用['属性名']：requestScope['stu-x']  //必须加引号
        取map中的数据可以使用". "也可以使用['key']


    el表达式运算：
        empty运算符：判断一个对象是否为空

    el存在的意义：
        1、简化操作
        2、友好显示

    el写base标签
    <% pageContext.setAttribute("req", request) %>
    <base href="${req.scheme}://${req.serverName}...">

[19]
JSTL   JSP Standard Tag Library   JSP标准标签库

EL代替JSP表达式
JSTL代替JSP脚本片段

导包：taglibs-standard-impl-XXX.jar、taglibs-standard-spec-XXX.jar
在jsp页面中通过taglib标签引入标签库：<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

    1、核心标签库  c标签库
        <c:out>：计算一个表达式并将结果输出到当前页面（类似于<%=>   ${}）
            value：要输出的内容，可以是el
            escapeXml：是否转义特殊字符，默认转义
        <c:set>：添加或修改域中的属性
            给域中设置属性：<c:set var="key" value="value" scope="request">
            修改对象的某个属性值：<c:set property="name" target="${user}" value="value">

        <c:remove>：移除域中的属性（如果不指定移出哪个域中的属性。那么就把所有域都移除）

        <c:if>：实现if功能
            test：就是判断条件，如果是true执行标签体里的东西
            scope：指定判断的结果保存到哪个域
            var：指定接收判断结果的变量名

        <c:choose>、<c:when>、<c:otherwise>组合使用
            <c:choose>：选择，从这里开始进入分支判断   switch case
            <c:choose>
                <c:when test="">
                    当when中的条件满足，执行标签体
                </c:when>
                <c:when test="">
                    当when中的条件满足，执行标签体
                </c:when>
                <c:otherwise>
                    否则执行otherwise中的标签体
                </c:otherwise>
            </c:choose>

        <c:forEach>：用来做循环遍历
            标签体就相当于循环体，可以直接使用el表达式获取
            begin：指定遍历的开始位置
            end：结束位置
            items：要遍历的东西   list、array...
            step：步长
            var：把每次遍历到的值赋给var这个变量
            varStatus：遍历状态，里面封装了当前遍历的所有状态信息（是一个对象）

        <c:url>：

        <c:redirect>：

    2、函数库  prefix="fn"
        定义的函数基本上都是对字符串的操作
        fn:contains    ${fn:contains(msg,"a")}
        fn:containsIgnoreCase
        fn:startsWith：是否以某个字符串开始
        fn:endsWith
        fn:indexOf：判断某个字符串的起始位置
        fn:replace
        fn:substring：截取字符串

    3、自定义标签
        1）编写标签库的描述文件
            库描述文件放在WEB-INF下
        2）标签的实现类  SimpleTag的实现类

[20]
MVC模式
Model View Controller 模型、视图、控制器

[21]
Cookie & Session

Cookie
    1、服务器发给浏览器要保存的数据（服务器发给浏览器的“会员卡”）
       服务器让浏览器去保存一份数据，以后访问的时候带上相应数据
       cookie创建发送给浏览器时，响应头多了：Set-Cookie: username=chenhao，就是命令浏览器保存一份cookie
       浏览器就保存这个字段，默认在一个会话期间只要访问我这个项目cookie都在
       以后只要是请求当前项目下的资源都会携带
    2、获取：reques.getCookies()
    3、删除：
        cookie生命周期：默认是在会话期间（浏览器一直不关）有效
        cookie修改默认的存活时间
        cookie.setMaxAge(0)
    4、持久化cookie
        cookie.setMaxAge(60 * 60); 表示一小时后浏览器才删除cookie
    5、设置cookie路径：告诉浏览器访问哪些资源会携带这个cookie
        默认：访问当前项目下的任何东西都会携带cookie
    6、Cookie机制（见截图）
    7、修改cookie
        浏览器如何识别是否为同一个cookie：根据cookie的name
        要修改cookie额值只需要创建一个同名cookie即可，浏览器就会将同名cookie覆盖

        因此，修改生命周期、设置路径、删除等操作也只需要创建同名cookie即可

Session
    服务器端保存数据的技术
    域对象，在整个会话期间保存的数据在任意资源都能取到
    作用：
        域对象共享数据
    1、获取session对象：request.getSession()
        判断Session是否是新创建的：session.isNew()
    2、session保存数据共享数据
    3、生命周期
        获取最大存活时间：session.getMaxInactiveInterval()     默认是30分钟
        为什么新会话开启会返回新session：因为获取session是根据cookie带来的jsessionid来获取的
        创建：第一次用session会创建一个新的session
            jsp文件已经内置session获取好了
        销毁：默认30分钟后销毁
        手动设置多少秒都过期：session.setMaxInactiveInterval()：负数代表永不过期；正数代表多少秒后过期（距离最后一次使用session的时间）
        强制session立即失效：session.invalidate()

    所以新的会话获取session是新的，和cookie的生命周期有关。浏览器打开关闭开启新的会话并不会导致之前的session销毁，只是找不到之前的session
    session在服务器中有很多的垃圾

    4、cookie被禁用：导致会话控制机制失效
        解决：使用url重写（把要访问的地址动态加上jsessionid）
        response.encodeRedirectURL(request.getContextPath()+"/s.jsp")

        jstl的方式：<c:url value="/s.jsp"></c:url>

    5、session的活化和钝化
        现象：服务器关闭、重新启动，只要浏览器没关，还是能获取到session里面的内容

        钝化：服务器关闭以后，会将session（序列化）保存到硬盘中
        活化：服务器再次启动时，就会再次加载之前保存的session

        session域中的对象要能同session一起钝化到磁盘中，必须实现序列化接口
        自己写的类要保存到session中，必须实现序列化接口Serializable

        关闭浏览器保持session：将jsessionid的那个cookie持久化（创建一个同名cookie，设置其最大存活时间）

表单重复提交
    多次提交了相同内容的表单
        1、成功以后，直接刷新页面（每次刷新就是重复上一次请求）
            解决：将转发改为重定向即可
        2、网速、服务器性能...导致处理请求慢。用户以为卡，狂点注册按钮
            将提交按钮点击后设为不可用，然后手动提交表单
        3、用户成功以后点击后退，再次提交
            采用令牌机制（token）
            每次提交表单，带上令牌。服务器验证口令，口令合法处理请求；口令不合法，直接打回
            解决思路：
                服务器和页面有一个相同的令牌。页面提交的时候，带上令牌，服务端验证是否跟他一致。如果一致则处理请求，如果不一致则不处理。

                生成令牌用UUID：UUID.randomUUID().toString();
                把令牌放到session里(服务器端)：session.setAttribute("token", uuid);
                页面把令牌放到表单里：<input type="hidden" name="token" value=<%=uuid%>>
                处理完之后移除服务器端的令牌：session.removeAttribute("token");

    危害：
        1、数据库多次保存相同数据
        2、安全问题
        3、服务器性能问题


[22]
Filter  过滤器
    过滤请求和相应
    Web服务器的三大组件：Servlet、Filter、Listener
    Filter是用来执行过滤任务的对象，作用于：
        1、请求一个资源（动态资源Servlet、JSP，静态资源）
        2、来自一个资源的响应

    Filter是用来过滤请求和响应
        1、filter可以拦截请求（request），可以修改请求头，请求内容
        2、filter可以拦截来自服务端的响应（response），可以修改响应头和响应内容
        3、放行请求

    urlPatterns表示要过滤哪些请求，例如urlPatterns = "/hello.jsp"表示访问hello.jsp的时候会被过滤器拦截

    chain.doFilter(req, resp);  就是将请求或响应放行

    执行流程（见截图）

    filter的生命周期
        1、服务器一启动（项目加载进服务器），创建filter对象并初始化（单例多线程）
        2、每次拦截都执行doFilter方法
        3、项目从服务器中卸载，执行销毁
        （和Servlet有所不同，Servlet是第一次访问的时候创建并初始化）

    filter-urlPatterns配置
        1、精确匹配：写要拦截的资源的详细路径  /hello.jsp
        2、路径匹配：/路径/*    拦截所有访问“路径名”下的资源    /*表示项目下的所有路径都拦截，/就表示项目根
        3、后缀匹配：*.后缀名   所有以给定后缀结尾的都拦截

    通过request来拦截部分请求
        HttpServletRequest req = (HttpServletRequest) request;
        String uri = req.getRequestURI();
        //只拦截jsp
        if(uri.endsWith("jsp")){
            System.out.println("拦截了");
        }else{
            chain.doFilter(request, response);
        }

    filter放行之前写中文乱码原因（见截图）

    filterConfig
        封装filter配置信息的对象

    filter链（见doFilter执行顺序截图）

    dispatch配置
        FORWARD：拦截转发过来的，转发到这个地址会被拦截（直接请求的就不拦了）
        INCLUDE：拦截包含的，包含这个地址的会被拦截（拦截动态包含）
        REQUEST：直接请求的，直接请求这个地址会被拦截（默认）
        ERROR：发生错误，去全局配置（web.xml）的一个错误页面会被拦截（不是errorPage指向的页面，它是转发得到的）

        dispatcherTypes = {DispatcherType.FORWARD, DispatcherType.REQUEST}

    使用filter事务控制
        每个功能模块应该使用一个链接，每个dao方法都不要自动关闭链接，应该我们手动去关链接（整个功能完成后关链接），如果整个功能某一步失败就可以回滚
        抓住这个特性：
            一个请求到响应完成用的都是统一线程
            应该一个线程对应一个链接，当这个线程执行出问题就直接回滚，否则提交
            可以使用一个map来保存connection key--->就是线程号，value--->就是当前线程对应的链接
            map(threadId, connection)
            connection = map.get(threadId)   //这就是当前线程对应的connection

[23]
Ajax
    AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术
    AJAX = 异步 JavaScript 和 XML，是一种用于创建快速动态网页的技术
    通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新
    传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面

    异步通信：通信之间没有任何优先级关系
    同步通信：上一次通信完成，下一次才能继续

    在代码中：
        如果发送的是异步请求，那么发送请求后，后面的代码，不用等待请求完成（接收到来自服务器的数据）在执行
        如果发送的是同步请求，那么发送请求后，后面的代码，必须等待请求完成（接收到来自服务器的数据）在执行

    1、创建xhr对象，用这个对象来向服务器发送请求
        var xhr = new XMLHttpRequest();  //不是所有浏览器都兼容，用下面的getXMLHttpRequest()
    2、发请求 open(), send()
        //xhr.open(method, url, async); 设置请求信息，可以将请求参数带在url上
        xhr.open("GET", "AJAXServlet?username=abc", true); //true表示异步，false表示同步  //AJAXServlet是自己写的一个Servlet

        //Object body 请求体，把要发送的数据放在请求体
        //xhr.send(body);
        //调用send方法将请求发出去
        xhr.send(null); 或者  xhr.send();

        //必须接收响应的数据
        //xhr有两个属性：
        //responseText：获得字符串形式的响应数据
        //responseXML：获得XML形式的响应数据
        //必须监控请求对象的状态
        //onreadystatechange 每当请求状态改变的时候就会执行
        //xhr对象有一个readyState属性：
            //0：请求未初始化
            //1：服务器连接已建立
            //2：请求已接收
            //3：请求处理中
            //4：请求已完成，且响应已就绪
        xhr.onreadystatechange = function(){
            //请求已完成的时候
            if(xhr.readyState == 4 && xhr.status == 200){
                //获取xhr的数据
                alert(xhr.responseText);
            }
        };

    为了兼容所有的浏览器，获取XMLHttpRequest对象的通用方法：
        function getXMLHttpRequest(){
            var xhr;
            try{
                //大部分浏览器都支持
                xhr = new XMLHttpRequest();
            }catch(e){
                try{
                    //如果不支持，在这里捕获异常并采用IE6支持的方式
                    xhr = new ActiveXObject("Msxml2.XMLHTTP");
                }catch(e){
                    //如果还不支持，在这样捕获异常并采用IE5支持的方式
                    xhr = new ActiveXObject("Microsoft.XMLHTTP");
                }
            }
            return xhr;
        }

    ！！！js发送Ajax很麻烦，用jQuery替代！！！
    function ajaxRequest(){
        //jQuery.get(url, data, callback, type)
        //jQuery如何接收参数：只需要在回调函数中定义一个接收响应数据的参数
        //type 返回内容的格式：xml，html，script， json， text， _default
        $.get("AJAXServlet?username=abc", function(data){
        //data接收响应数据
            alert(data);
        })
    }

    ajax请求缓存问题：
        解决方法：参数中带上随机数 xhr.open("GET", "AJAXServlet?username=abc&&t="+Math.random(), true);
        带上随机数之后，服务器就会认为是不同的请求，就不会从缓存里去取数据了

[24]
JSON
    JavaScript Object Notation  JS对象表示法
    js表示一个对象：var stu = {name:"jack", age:18};
    JSON就是表示对象的方法，格式就是按照js声明对象的格式，有要求：Key（属性）必须有双引号，value可以是：基本类型、引用类型（对象）

    用JSON来表示一个stu对象，要声明一个json对象（json称为js对象的字面量，类似于Object对象有一个toString描述）
    var stu = {"name":"jack", "age":18};  //json对象在js中的应用

    JSON只是一种格式要求：{属性: 值, 属性: 值 ...}

    //对象
    var json = {"name":"jack", "age":18};
    //js中如何将json对象转为字符串，利于发送和传输
    var str = JSON.stringify(json);
    //将json格式的字符串转为对象，利于解析
    var obj = JSON.parse(str);

    json在js中的应用：如果网络间传输的都是接送格式的字符串，非常容易解析

    json和Java对象之间的互转：
        //把Java对象转换成json字符串
        Gson gson = new Gson();
        gson.toJson(java对象);

        //将json字符串转换成java对象
        gson.fromJson(json, 类名.class);

    json与List的互转：
        list--->json：gson.toJson(list)
        json--->list：
            写一个类MyType继承TypeToken<List<类型>>，内容不用写
            gson.fromJson(json, new MyType().getType());
            或者用匿名内部类（如下所示）

    json与Map互转：
    map--->json：gson.toJson(map)
    json--->map：gson.fromJson(json, new TypeToken<Map<String, Student>>(){}.getType());

jQuery Get-Post请求
    jQuery发get请求：$.get(url, data请求参数, callback请求成功的回调函数, type设置返回的响应的内容类型);

ajax请求
    $.ajax()：jQuery中底层的ajax请求方法，可以设置详细的参数
     $.ajax(url, [settings])

      response.getWriter().write(); ---> ajax可以收到数据
      写数据就是给客户端响应

表单序列化 - Ajax提交表单
    var datas = $("#formSubmit").serialize();
    然后把datas放到ajax请求的data中

[25]
Listener
    监听器，javaweb的三大组件之一
    监听事件的发生 ---> 事件发生后触发相应的处理函数
    监听对象：
        ServletRequest
        ServletContext 代表当前整个Web应用
        HttpSession
    八个监听器：都是接口
        三大类：
            1、生命周期监听器   监听三个对象的生命周期
                ServletRequestListener：发生请求初始化，请求结束就销毁
                ServletContextListener：项目加载进服务器创建对象，项目卸载就销毁
                HttpSessionListener：新会话进来的时候创建对象，session失效（强制失效或者超时）就销毁
            2、属性监听器    监听域对象中属性的增删改
                ServletRequestAttributeListener
                ServletContextAttributeListener
                HttpSessionAttributeListener
            3、session固有监听器
                HttpSessionActivationListener   监听session中某个对象的活化钝化
                HttpSessionBindingListener      监听一个对象是否绑定到session中（保存到session中）

    要监听某个对象的钝化和活化，需要实现HttpSessionActivationListener接口（对象要和session一起钝化活化必须实现序列化接口）
    这个javaBean、对象、类只需要实现HttpSessionActivationListener接口即可

    监听一个对象是否绑定到session中，这个类实现HttpSessionBindingListener接口
    绑定：保存到session
    解绑：session中移除

[26]
国际化
    同一个网站可以支持多种不同的语言
    Java中的三个类：
        ResourceBundle：管理资源文件（要动态获取的内容）
        Locale：代表当前区域
        XXXFormat

    Locale locale = request.getLocale();   可以根据用户的请求来动态的获取区域信息

[27]
文件上传
     正常将文件上传到服务器

     上传需要引入两个工具：commons-io、commons-fileupload

     文件上传准备：
        1、在表单上有上传按钮  <input type="file">
        2、所有文件上传method属性都为post
        3、以流的形式提交表单，表单标签中加  enctype="multipart/form-data"
            enctype="multipart/form-data"：不对字符编码，在使用包含文件上传控件的表单时，必须使用该值

        点击提交：将文件的流以及表单的内容都放在流里提交（request.getParameter就无法使用了）

     DiskFileItemFactory：工厂类
     FileItem：文件项
     ServletFileUpload：Servlet文件上传

！！！文件上传流程：
        1、先创建一个工厂
            DiskFileItemFactory factory = new DiskFileItemFactory();
        2、创建一个专门用来解析Servlet文件上传的对象
            ServletFileUpload fileUpload = new ServletFileUpload(factory);
        3、解析文件上传请求
            //FileItem就是封装了请求的流中的每个部件
            //每一个部件就是对应一个FileItem
            List<FileItem> list = fileUpload.parseRequest(request);
        4、解析每一个部件FileItem
            for(FileItem fileItem : list){
                //判断是否为文件上传的表单项
                if(fileItem.isFormField()){
                    //true表示是简单的key-value
                    //getFieldName()值就是获取表单项的name值
                    String fileName = fileItem.getFieldName();
                    //获取普通表单项的value值
                    String value = fileItem.getString("utf-8");

                    //getName()获取文件名（普通表单项获取不到）
                    String name = fileItem.getName();
                }else{
                    //如果是文件项，保存文件流
                    //getInputStream()获取文件项的文件输入流
                    InputStream stream = fileItem.getInputStream();
                    //保存流
                    //将文件写到项目中，动态获取文件夹路径
                    ServletContext servletContext = getServletContext();
                    String realPath = servletContext.getRealPath("/files");
                    //文件名的前缀，解决文件名重复问题
                    String fileName = fileItem.getFieldName(); //获取文件名
                    String prefix = UUID.randomUUID().toString().replaceAll("-", "");
                    filename = prefix + "_" + filename;
                    FileOutputStream outputStream = new FileOutputStream(realPath + "/" + filename);
                    //将输入流的内容写在输出流里
                    IOUtils.copy(stream, outputStream);
                    //关流
                    outputStream.close();
                }
            }

[28]
文件下载
    本质就是告诉浏览器资源不要直接打开，而是下载

    //把要下载的资源的流传给浏览器
    //1、设置响应的文件类型，文件是什么类型就设置什么类型
    String mimeType = getServletContext().getMimeType("/xxx.jpg);
    response.setContentType(mimeType);
    //2、设置资源的处理方式，设置处理方式响应头
    //解决中文文件名问题
    String string = new String("xxx.jpg".getBytes("gbk"), "iso8859-1");
    response.setHeader("Content-Disposition", "attachment;filename="+string);
    //3、可选的设置，设置文件大小 response.setContentLength();

    String realPath = getServletContext().getRealPath("/xxx.jpg");
    //4、将文件流写出去
    FileInputStream is = new FileInputStream(realPath);

    ServletOutputStream os = response.getOutputStream();
    IOUtils.copy(is, os);

    is.close();os.close();

[29]
服务器部署
    将项目导出的.war包放到服务器的webapps目录下

    安装tomcat作为一个服务，实现开机自启：cmd以管理员身份进入tomcat按照的bin目录下输入service.bat install Tomcat
    移除服务：sc delete Tomcat